{"version":3,"sources":["ts/App/Models/figureInterface.ts","ts/App/Models/kingModel.ts","ts/App/Models/knightModel.ts","ts/App/Models/rookModel.ts","ts/App/Models/towerModel.ts","ts/App/Models/bishopModel.ts","ts/App/Models/queenModel.ts","ts/App/Models/index.ts","ts/App/Models/boardModel.ts","ts/App/Views/boardView.ts","ts/App/Controllers/boardController.ts","ts/App/App.ts","ts/index.ts"],"names":[],"mappings":";AA2BC,aAzBD,IAAY,EAKA,EAoBX,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,WAAA,QAAA,WAAA,EAzBD,SAAY,GACR,EAAA,MAAA,IACA,EAAA,MAAA,IAFJ,CAAY,EAAA,QAAA,QAAA,QAAA,MAAK,KAKjB,SAAY,GACR,EAAA,KAAA,IACA,EAAA,MAAA,IACA,EAAA,OAAA,IACA,EAAA,OAAA,IACA,EAAA,MAAA,IACA,EAAA,KAAA,IANJ,CAAY,EAAA,QAAA,aAAA,QAAA,WAAU;;ACLtB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAFA,IAAA,EAAA,QAAA,qBAEA,EAAA,WAOI,SAAA,EAAY,GACH,KAAA,MAAQ,EACR,KAAA,KAAO,EAAA,WAAW,KAClB,KAAA,YAAc,CACf,CAAC,EAAE,GAAI,IACP,CAAC,EAAE,EAAG,IACN,CAAC,EAAE,EAAG,IACN,CAAC,CAAC,GAAI,IACN,CAAC,CAAC,EAAG,IACL,CAAC,CAAC,EAAG,IACL,CAAC,CAAC,GAAI,IACN,CAAC,CAAC,EAAG,IACL,CAAC,CAAC,EAAG,KAEJ,KAAA,cAAgB,KAAK,YACrB,KAAA,SAAU,EAMvB,OAHW,EAAA,UAAA,KAAP,WACS,KAAA,SAAU,GAEvB,EA5BA,GAAA,QAAA,QAAA;;ACAA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAFA,IAAA,EAAA,QAAA,qBAEA,EAAA,WAOI,SAAA,EAAY,GACH,KAAA,MAAQ,EACR,KAAA,KAAO,EAAA,WAAW,OAClB,KAAA,YAAc,CACf,CAAC,EAAE,GAAI,IACP,CAAC,EAAE,EAAG,IACN,CAAC,EAAE,EAAG,IACN,CAAC,EAAE,GAAI,IACP,CAAC,CAAC,EAAG,IACL,CAAC,CAAC,GAAI,IACN,CAAC,CAAC,GAAI,IACN,CAAC,CAAC,EAAG,KAEJ,KAAA,cAAgB,KAAK,YACrB,KAAA,SAAU,EAMvB,OAHW,EAAA,UAAA,KAAP,WACS,KAAA,SAAU,GAEvB,EA3BA,GAAA,QAAA,QAAA;;ACAA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAFA,IAAA,EAAA,QAAA,qBAEA,EAAA,WAOI,SAAA,EAAY,GACH,KAAA,MAAQ,EACR,KAAA,KAAO,EAAA,WAAW,KACjB,IAAA,EAAkB,KAAK,QAAU,EAAA,MAAM,MAAQ,GAAK,EACrD,KAAA,YAAc,CACf,CAAC,CAAC,EAAG,EAAI,GAAU,CAAC,EAAG,EAAI,KAE1B,KAAA,cAAgB,CACjB,CAAC,CAAC,EAAI,IACN,CAAC,EAAE,EAAI,EAAS,KAEf,KAAA,SAAU,EAUvB,OAPI,EAAA,UAAA,KAAA,WACS,KAAA,SAAU,EACT,IAAA,EAAkB,KAAK,QAAU,EAAA,MAAM,MAAQ,GAAK,EACrD,KAAA,YAAc,CACf,CAAC,CAAC,EAAG,EAAI,MAGrB,EA5BA,GAAA,QAAA,QAAA;;ACAA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAFA,IAAA,EAAA,QAAA,qBAEA,EAAA,WAOI,SAAA,EAAY,GACH,KAAA,MAAQ,EACR,KAAA,KAAO,EAAA,WAAW,MAClB,KAAA,YAAc,CACf,CAAC,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,IACrD,CAAC,EAAE,EAAG,GAAI,EAAE,EAAG,GAAI,EAAE,EAAG,GAAI,EAAE,EAAG,GAAI,EAAE,EAAG,GAAI,EAAE,EAAG,GAAI,EAAE,EAAG,IAC5D,CAAC,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,IACrD,CAAC,CAAC,GAAI,GAAI,CAAC,GAAI,GAAI,CAAC,GAAI,GAAI,CAAC,GAAI,GAAI,CAAC,GAAI,GAAI,CAAC,GAAI,GAAI,CAAC,GAAI,KAE3D,KAAA,cAAgB,KAAK,YACrB,KAAA,SAAU,EAMvB,OAHI,EAAA,UAAA,KAAA,WACS,KAAA,SAAU,GAEvB,EAvBA,GAAA,QAAA,QAAA;;ACAA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAFA,IAAA,EAAA,QAAA,qBAEA,EAAA,WAOI,SAAA,EAAY,GACH,KAAA,MAAQ,EACR,KAAA,KAAO,EAAA,WAAW,OAClB,KAAA,YAAc,CACf,CAAC,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,IACrD,CAAC,EAAE,EAAG,GAAI,EAAE,EAAG,GAAI,EAAE,EAAG,GAAI,EAAE,EAAG,GAAI,EAAE,EAAG,GAAI,EAAE,EAAG,GAAI,EAAE,EAAG,IAC5D,CAAC,EAAE,GAAI,GAAI,EAAE,GAAI,GAAI,EAAE,GAAI,GAAI,EAAE,GAAI,GAAI,EAAE,GAAI,GAAI,EAAE,GAAI,GAAI,EAAE,GAAI,IACnE,CAAC,CAAC,GAAI,GAAI,CAAC,GAAI,GAAI,CAAC,GAAI,GAAI,CAAC,GAAI,GAAI,CAAC,GAAI,GAAI,CAAC,GAAI,GAAI,CAAC,GAAI,KAE3D,KAAA,cAAgB,KAAK,YACrB,KAAA,SAAU,EAMvB,OAHW,EAAA,UAAA,KAAP,WACS,KAAA,SAAU,GAEvB,EAvBA,GAAA,QAAA,QAAA;;ACAA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAFA,IAAA,EAAA,QAAA,qBAEA,EAAA,WAOI,SAAA,EAAY,GACH,KAAA,MAAQ,EACR,KAAA,KAAO,EAAA,WAAW,MAClB,KAAA,YAAc,CACf,CAAC,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,IACrD,CAAC,EAAE,EAAG,GAAI,EAAE,EAAG,GAAI,EAAE,EAAG,GAAI,EAAE,EAAG,GAAI,EAAE,EAAG,GAAI,EAAE,EAAG,GAAI,EAAE,EAAG,IAC5D,CAAC,EAAE,GAAI,GAAI,EAAE,GAAI,GAAI,EAAE,GAAI,GAAI,EAAE,GAAI,GAAI,EAAE,GAAI,GAAI,EAAE,GAAI,GAAI,EAAE,GAAI,IACnE,CAAC,CAAC,GAAI,GAAI,CAAC,GAAI,GAAI,CAAC,GAAI,GAAI,CAAC,GAAI,GAAI,CAAC,GAAI,GAAI,CAAC,GAAI,GAAI,CAAC,GAAI,IAC5D,CAAC,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,IACrD,CAAC,EAAE,EAAG,GAAI,EAAE,EAAG,GAAI,EAAE,EAAG,GAAI,EAAE,EAAG,GAAI,EAAE,EAAG,GAAI,EAAE,EAAG,GAAI,EAAE,EAAG,IAC5D,CAAC,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,IACrD,CAAC,CAAC,GAAI,GAAI,CAAC,GAAI,GAAI,CAAC,GAAI,GAAI,CAAC,GAAI,GAAI,CAAC,GAAI,GAAI,CAAC,GAAI,GAAI,CAAC,GAAI,KAE3D,KAAA,cAAgB,KAAK,YACrB,KAAA,SAAU,EAMvB,OAHW,EAAA,UAAA,KAAP,WACS,KAAA,SAAU,GAEvB,EA3BA,GAAA,QAAA,QAAA;;ACWI,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,WAAA,QAAA,YAAA,QAAA,WAAA,QAAA,UAAA,QAAA,YAAA,QAAA,eAAA,EAbJ,IAAA,EAAA,EAAA,QAAA,gBAQI,QAAA,UARG,EAAA,QACP,IAAA,EAAA,EAAA,QAAA,kBAQI,QAAA,YARG,EAAA,QACP,IAAA,EAAA,EAAA,QAAA,gBAQI,QAAA,UARG,EAAA,QACP,IAAA,EAAA,EAAA,QAAA,iBAQI,QAAA,WARG,EAAA,QACP,IAAA,EAAA,EAAA,QAAA,kBAQI,QAAA,YARG,EAAA,QACP,IAAA,EAAA,EAAA,QAAA,iBAQI,QAAA,WARG,EAAA;;ACMP,aAAA,IAAA,EAAA,MAAA,KAAA,gBAAA,WAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,GAAA,UAAA,GAAA,OAAA,IAAA,EAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,IAAA,IAAA,IAAA,EAAA,UAAA,GAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAVA,IAAA,EAAA,QAAA,qBACA,EAAA,QAAA,WASA,EAAA,WAKI,SAAA,IAJQ,KAAA,UAAuB,IAAI,EAAA,UAAU,EAAA,MAAM,OAC3C,KAAA,UAAuB,IAAI,EAAA,UAAU,EAAA,MAAM,OAC5C,KAAA,MAA8B,KAAK,WAkI9C,OA7HW,EAAA,UAAA,KAAP,SAAY,EAAc,GAChB,IAAA,EAAS,KAAK,IAAI,GACpB,GACA,EAAO,OAEN,KAAA,IAAI,EAAK,GACT,KAAA,WAAW,IAGb,EAAA,UAAA,IAAP,SAAW,GACA,OAAA,KAAK,MAAM,EAAI,EAAI,IAAI,EAAI,GAAK,IAGpC,EAAA,UAAA,IAAP,SAAW,EAAY,GACd,KAAA,MAAM,EAAI,EAAI,IAAI,EAAI,GAAK,GAAK,GAGjC,EAAA,UAAA,WAAR,SAAmB,GACV,KAAA,IAAI,EAAK,OAGX,EAAA,UAAA,iBAAP,SAAwB,GAAxB,IAAA,EAAA,KACU,EAAiB,GACjB,EAAW,KAAK,IAAI,GACtB,OAAa,OAAb,EACO,GAGX,EAAS,YAAY,QAAQ,SAAA,GAElB,IADH,IAAA,EAAc,EACX,EAAc,EAAO,QAAQ,CAC1B,IAAA,EAAO,EAAO,GAEd,EAAM,EAAI,GAAK,EAAK,GACtB,GAAA,EAAM,GAAK,EAAM,EACjB,MAEE,IAAA,EAAM,EAAI,GAAK,EAAK,GACtB,GAAA,EAAM,GAAK,EAAM,EACjB,MAEE,IAAA,EAAgB,CAAC,EAAK,GAExB,GAAqB,OAArB,EAAK,IAAI,GACT,MAEJ,EAAM,KAAK,CAAC,EAAK,IACjB,GAAe,KAIhB,IAGJ,EAAA,UAAA,mBAAP,SAA0B,GAA1B,IAAA,EAAA,KACU,EAAmB,GACnB,EAAW,KAAK,IAAI,GAEtB,OAAa,OAAb,EACO,GAGX,EAAS,cAAc,QAAQ,SAAA,GAEpB,IADH,IAAA,EAAc,EACX,EAAc,EAAO,QAAQ,CAC1B,IAAA,EAAO,EAAO,GAEd,EAAM,EAAI,GAAK,EAAK,GACtB,GAAA,EAAM,GAAK,EAAM,EACjB,MAEE,IAAA,EAAM,EAAI,GAAK,EAAK,GACtB,GAAA,EAAM,GAAK,EAAM,EACjB,MAEE,IAAA,EAAgB,CAAC,EAAK,GACtB,EAAS,EAAK,IAAI,GAEpB,GAAW,OAAX,EAAiB,CACb,EAAO,QAAU,EAAS,OAAO,EAAQ,KAAK,CAAC,EAAK,IACxD,MAEJ,GAAe,KAIhB,IAGH,EAAA,UAAA,SAAR,SAAiB,GACN,OAAA,EAAI,IAAI,MAAM,IAAI,IAAI,SAAA,GAAK,OAAA,IAAI,EAAA,UAAU,MAG5C,EAAA,UAAA,YAAR,SAAoB,GACT,MAAA,CACH,IAAI,EAAA,WAAW,GACf,IAAI,EAAA,YAAY,GAChB,IAAI,EAAA,YAAY,GAChB,IAAI,EAAA,WAAW,GACf,IAAU,EAAA,MAAM,MAAQ,KAAK,UAAY,KAAK,UAC9C,IAAI,EAAA,YAAY,GAChB,IAAI,EAAA,YAAY,GAChB,IAAI,EAAA,WAAW,KAIhB,EAAA,UAAA,SAAP,WACI,OAAA,EAAA,CACI,KAAK,YAAY,EAAA,MAAM,OACvB,KAAK,SAAS,EAAA,MAAM,QAChB,MAAM,KAAK,CAAE,OAAQ,GAAK,SAAA,GAAK,OAAA,MAAM,GAAG,KAAK,QAAO,CACxD,KAAK,SAAS,EAAA,MAAM,OACpB,KAAK,YAAY,EAAA,MAAM,UAMxB,EAAA,UAAA,OAAP,SAAc,GACH,OAAA,GAGJ,EAAA,UAAA,YAAP,SAAmB,GACR,OAAA,GAEf,EArIA,GAAA,QAAA,QAAA;;ACRA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,IAAA,EAAA,WAAA,SAAA,KA6FA,OA3FW,EAAA,UAAA,KAAP,SAAY,EAAqB,EAAwB,GAAzD,IAAA,EAAA,KACU,EAAQ,SAAS,cAAc,OACrC,EAAM,UAAU,IAAI,cAEpB,EAAW,MAAM,QAAQ,SAAC,EAAK,GAC3B,EAAI,QAAQ,SAAC,EAAQ,GACX,IAAA,EAAQ,SAAS,cAAc,OAWjC,GATJ,EAAM,QAAQ,EAAI,EAAI,EAAU,GAChC,EAAM,QAAQ,EAAI,EAAI,EAAU,GAEhC,EAAM,iBAAiB,QAAS,WACtB,IAAA,EAAkB,CAAC,SAAS,EAAM,QAAQ,GAAI,SAAS,EAAM,QAAQ,IAC3E,EAAa,KAGjB,EAAM,UAAU,IAAI,qBAChB,EAAQ,CACF,IAAA,EAAc,EAAK,eAAe,GACxC,EAAM,YAAY,GAGtB,EAAM,YAAY,OAG1B,EAAO,YAAY,IAGf,EAAA,UAAA,eAAR,SAAuB,GACb,IAAA,EAAY,SAAS,cAAc,OAGnC,EAAO,EAAO,MAAQ,EAAO,KAO5B,OALP,EAAU,aAAa,MAAO,gCAAgC,EAAI,QAClE,EAAU,aAAa,MAAU,EAAO,MAAK,IAAI,EAAO,MAExD,EAAU,UAAU,IAAI,sBAEjB,GAGH,EAAA,UAAA,WAAR,SAAmB,GACT,IAAA,EAAQ,KAAK,SAAS,GAC5B,EAAM,UAAY,GAClB,EAAM,UAAU,MAAQ,GACxB,EAAM,UAAU,IAAI,sBAGhB,EAAA,UAAA,iBAAR,SAAyB,EAAY,GAC3B,IAAA,EAAQ,KAAK,SAAS,GACtB,EAAc,KAAK,eAAe,GACxC,EAAM,UAAY,GAClB,EAAM,YAAY,IAGf,EAAA,UAAA,SAAP,SAAgB,GAGL,OAFO,SAAS,cAAc,YAAY,EAAI,GAAE,cAAc,EAAI,GAAE,OAKxE,EAAA,UAAA,KAAP,SAAY,EAAc,EAAY,GAC7B,KAAA,iBAAiB,EAAK,GACtB,KAAA,WAAW,GACX,KAAA,eAIF,EAAA,UAAA,oBAAP,SAA2B,GACT,KAAK,SAAS,GACtB,UAAU,IAAI,qCAGjB,EAAA,UAAA,sBAAP,SAA6B,GACX,KAAK,SAAS,GACtB,UAAU,IAAI,uCAGjB,EAAA,UAAA,cAAP,SAAqB,GACH,KAAK,SAAS,GACtB,UAAU,IAAI,gCAGjB,EAAA,UAAA,YAAP,WACmB,SAAS,iBAAiB,sBAClC,QAAQ,SAAA,GACX,EAAM,UAAU,MAAQ,GACxB,EAAM,UAAU,IAAI,wBAGhC,EA7FA,GAAA,QAAA,QAAA;;ACEA,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAJA,IAAA,EAAA,EAAA,QAAA,yBACA,EAAA,QAAA,6BACA,EAAA,EAAA,QAAA,uBAEA,EAAA,WASI,SAAA,EAAY,GAAZ,IAAA,EAAA,KA+CQ,KAAA,aAAe,SAAC,GAEhB,EAAK,cACL,EAAK,sBAAsB,EAAK,EAAK,eAErC,EAAK,kBAAkB,IAnDtB,KAAA,OAAS,EACT,KAAA,MAAQ,IAAI,EAAA,QACZ,KAAA,KAAO,IAAI,EAAA,QACX,KAAA,QAAU,EAAA,MAAM,MAChB,KAAA,cAAgB,KAChB,KAAA,iBAAmB,GACnB,KAAA,mBAAqB,GAmFlC,OAhFY,EAAA,UAAA,cAAR,SAAsB,EAAY,GACvB,OAAE,EAAK,MAAM,SAAA,GAAQ,OAAA,EAAK,KAAO,EAAI,IAAM,EAAK,KAAO,EAAI,MAG9D,EAAA,UAAA,aAAR,SAAqB,GAArB,IAAA,EAAA,KACS,KAAA,KAAK,cAEL,KAAA,cAAgB,EAChB,KAAA,iBAAmB,KAAK,MAAM,iBAAiB,KAAK,eACpD,KAAA,mBAAqB,KAAK,MAAM,mBAAmB,KAAK,eAExD,KAAA,KAAK,cAAc,GACnB,KAAA,iBAAiB,QAAQ,SAAA,GAC1B,EAAK,KAAK,oBAAoB,KAE7B,KAAA,mBAAmB,QAAQ,SAAA,GAC5B,EAAK,KAAK,sBAAsB,MAIhC,EAAA,UAAA,iBAAR,WACS,KAAA,KAAK,cACL,KAAA,cAAgB,KAChB,KAAA,iBAAmB,GACnB,KAAA,mBAAqB,IAGtB,EAAA,UAAA,SAAR,SAAiB,EAAc,EAAY,GAClC,KAAA,KAAK,KAAK,EAAO,EAAK,GACtB,KAAA,MAAM,KAAK,EAAO,IAGpB,EAAA,UAAA,SAAP,WACS,KAAA,KAAK,KAAK,KAAK,OAAQ,KAAK,MAAO,KAAK,cACxC,KAAA,QAAU,EAAA,MAAM,OAYjB,EAAA,UAAA,kBAAR,SAA0B,GAEhB,IAAA,EAAS,KAAK,MAAM,IAAI,GAG1B,GAAU,EAAO,QAAU,KAAK,SAC3B,KAAA,aAAa,IAIlB,EAAA,UAAA,sBAAR,SAA8B,EAAY,GAChC,IAAA,EAAgB,KAAK,MAAM,IAAI,GAG/B,EAAS,KAAK,MAAM,IAAI,GAC1B,GAAA,GAAiB,EAAQ,CAErB,GAAA,EAAc,QAAU,EAAO,MAE/B,YADK,KAAA,aAAa,GAKd,KAAK,cAAc,EAAK,KAAK,qBAC7B,QAAQ,IAAI,eAGb,GAAU,KAAK,cAAc,EAAK,KAAK,mBAGzC,KAAA,SAAS,EAAU,EAAK,GAE5B,KAAA,oBAEb,EAnGA,GAAA,QAAA,QAAA;;ACHA,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAFA,IAAA,EAAA,EAAA,QAAA,kCAEA,SAAwB,IACK,QAAQ,IAAI,sBAC/B,IAAA,EAAO,SAAS,eAAe,QAElB,IAAI,EAAA,QAAgB,GAC5B,WALf,QAAA,QAAA;;ACAA,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAFA,IAAA,EAAA,EAAA,QAAA,cAEA,EAAA","file":"ts.2aa4372b.js","sourceRoot":"../src","sourcesContent":["import { type } from \"os\";\n\nexport enum Color {\n    Black = 'b',\n    White = 'w'\n};\n\nexport enum FigureType {\n    Rook = 'p',\n    Tower = 'r',\n    Bishop = 'b',\n    Knight = 'n',\n    Queen = 'q',\n    King = 'k'\n};\n\nexport type Field = [number, number];\nexport type ListOfVectors = Field[][];\n\n\nexport interface IFigure {\n    readonly color: Color;\n    readonly name: FigureType;\n    isMoved: boolean; //is this figure already moved in current game\n    moveVectors: ListOfVectors;\n    attackVectors: ListOfVectors;\n    move(): void;\n};","import { IFigure, Color, FigureType, ListOfVectors } from './figureInterface';\n\nexport default class KingModel implements IFigure {\n    public readonly color: Color;\n    public readonly name: FigureType;\n    public isMoved: boolean;\n    public moveVectors: ListOfVectors;\n    public attackVectors: ListOfVectors;\n\n    constructor(color: Color) {\n        this.color = color;\n        this.name = FigureType.King;\n        this.moveVectors = [\n            [[-1, -1]],\n            [[-1, 0]],\n            [[-1, 1]],\n            [[0, -1]],\n            [[0, 0]],\n            [[0, 1]],\n            [[1, -1]],\n            [[1, 0]],\n            [[1, 1]],\n        ];\n        this.attackVectors = this.moveVectors;\n        this.isMoved = false;\n    }\n\n    public move() {\n        this.isMoved = true;\n    }\n}","import { IFigure, Color, FigureType, ListOfVectors } from './figureInterface';\n\nexport default class KnightModel implements IFigure {\n    public readonly color: Color;\n    public readonly name: FigureType;\n    public isMoved: boolean;\n    public moveVectors: ListOfVectors;\n    public attackVectors: ListOfVectors;\n\n    constructor(color: Color) {\n        this.color = color;\n        this.name = FigureType.Knight;\n        this.moveVectors = [\n            [[-2, -1]],\n            [[-2, 1]],\n            [[-1, 2]],\n            [[-1, -2]],\n            [[1, 2]],\n            [[1, -2]],\n            [[2, -1]],\n            [[2, 1]],\n        ];\n        this.attackVectors = this.moveVectors;\n        this.isMoved = false;\n    }\n\n    public move() {\n        this.isMoved = true;\n    }\n}","import { IFigure, Color, FigureType, ListOfVectors } from './figureInterface';\n\nexport default class RookModel implements IFigure {\n    public readonly color: Color;\n    public readonly name: FigureType;\n    public isMoved: boolean;\n    public moveVectors: ListOfVectors;\n    public attackVectors: ListOfVectors;\n\n    constructor(color: Color) {\n        this.color = color;\n        this.name = FigureType.Rook;\n        const reverse: number = this.color === Color.White ? 1 : -1;\n        this.moveVectors = [\n            [[0, 1 * reverse], [0, 2 * reverse]]\n        ];\n        this.attackVectors = [\n            [[1 , reverse]],\n            [[-1 * reverse, reverse]]\n        ];\n        this.isMoved = false;\n    }\n\n    move() {\n        this.isMoved = true;\n        const reverse: number = this.color === Color.White ? 1 : -1;\n        this.moveVectors = [\n            [[0, 1 * reverse]]\n        ];\n    }\n}","import { IFigure, Color, FigureType, ListOfVectors } from './figureInterface';\n\nexport default class TowerModel implements IFigure {\n    public readonly color: Color;\n    public readonly name: FigureType;\n    public isMoved: boolean;\n    public moveVectors: ListOfVectors;\n    public attackVectors: ListOfVectors;\n\n    constructor(color: Color) {\n        this.color = color;\n        this.name = FigureType.Tower;\n        this.moveVectors = [\n            [[1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0]], //top\n            [[-1, 0], [-2, 0], [-3, 0], [-4, 0], [-5, 0], [-6, 0], [-7, 0]], //bottom\n            [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7]], //right\n            [[0, -1], [0, -2], [0, -3], [0, -4], [0, -5], [0, -6], [0, -7]] //left\n        ];\n        this.attackVectors = this.moveVectors;\n        this.isMoved = false;\n    }\n\n    move() {\n        this.isMoved = true;\n    }\n}","import { IFigure, Color, FigureType, ListOfVectors } from './figureInterface';\n\nexport default class BishopModel implements IFigure {\n    public readonly color: Color;\n    public readonly name: FigureType;\n    public isMoved: boolean;\n    public moveVectors: ListOfVectors;\n    public attackVectors: ListOfVectors;\n\n    constructor(color: Color) {\n        this.color = color;\n        this.name = FigureType.Bishop;\n        this.moveVectors = [\n            [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7]], //right-bottom\n            [[-1, 1], [-2, 2], [-3, 3], [-4, 4], [-5, 5], [-6, 6], [-7, 7]], //right-top\n            [[-1, -1], [-2, -2], [-3, -3], [-4, -4], [-5, -5], [-6, -6], [-7, -7]], //left-top\n            [[1, -1], [2, -2], [3, -3], [4, -4], [5, -5], [6, -6], [7, -7]], //left-bottom\n        ];\n        this.attackVectors = this.moveVectors;\n        this.isMoved = false;\n    }\n\n    public move() {\n        this.isMoved = true;\n    }\n}","import { IFigure, Color, FigureType, ListOfVectors } from './figureInterface';\n\nexport default class QueenModel implements IFigure {\n    public readonly color: Color;\n    public readonly name: FigureType;\n    public isMoved: boolean;\n    public moveVectors: ListOfVectors;\n    public attackVectors: ListOfVectors;\n\n    constructor(color: Color) {\n        this.color = color;\n        this.name = FigureType.Queen;\n        this.moveVectors = [\n            [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7]], //right-bottom\n            [[-1, 1], [-2, 2], [-3, 3], [-4, 4], [-5, 5], [-6, 6], [-7, 7]], //right-top\n            [[-1, -1], [-2, -2], [-3, -3], [-4, -4], [-5, -5], [-6, -6], [-7, -7]], //left-top\n            [[1, -1], [2, -2], [3, -3], [4, -4], [5, -5], [6, -6], [7, -7]], //left-bottom\n            [[1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0]], //bottom\n            [[-1, 0], [-2, 0], [-3, 0], [-4, 0], [-5, 0], [-6, 0], [-7, 0]], //top\n            [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7]], //right\n            [[0, -1], [0, -2], [0, -3], [0, -4], [0, -5], [0, -6], [0, -7]] //left\n        ];\n        this.attackVectors = this.moveVectors;\n        this.isMoved = false;\n    }\n\n    public move() {\n        this.isMoved = true;\n    }\n}","import KingModel from './kingModel';\nimport KnightModel from './knightModel';\nimport RookModel from './rookModel';\nimport TowerModel from './towerModel';\nimport BishopModel from './bishopModel';\nimport QueenModel from './queenModel';\n\nexport {\n    KingModel,\n    KnightModel,\n    RookModel,\n    TowerModel,\n    BishopModel,\n    QueenModel\n}","import IBoard from './boardInterface';\nimport { IFigure, Color, Field, FigureType } from './figureInterface';\nimport {\n    KingModel,\n    KnightModel,\n    RookModel,\n    TowerModel,\n    BishopModel,\n    QueenModel\n} from './index';\n\nexport default class BoardModel implements IBoard {\n    private blackKing: KingModel = new KingModel(Color.Black);\n    private whiteKing: KingModel = new KingModel(Color.White);\n    public board: (IFigure | null)[][] = this.setBoard();\n\n    constructor() {\n    }\n\n    public move(start: Field, end: Field): void {\n        const figure = this.get(start);\n        if (figure) {\n            figure.move();\n        }\n        this.set(end, figure);\n        this.resetField(start);\n    }\n\n    public get(pos: Field): (IFigure | null) {\n        return this.board[8 - pos[1]][pos[0] - 1];\n    }\n\n    public set(pos: Field, figure: IFigure | null): void {\n        this.board[8 - pos[1]][pos[0] - 1] = figure;\n    }\n\n    private resetField(pos: Field): void {\n        this.set(pos, null);\n    }\n\n    public possibleMovesFor(pos: Field): Field[] {\n        const moves: Field[] = [];\n        const chessman = this.get(pos);\n        if (chessman === null) {\n            return moves;\n        }\n\n        chessman.moveVectors.forEach(vector => {\n            let indexOfMove = 0;\n            while (indexOfMove < vector.length) {\n                const move = vector[indexOfMove];\n\n                const row = pos[0] + move[0];\n                if (row < 1 || row > 8) {\n                    break;\n                }\n                const col = pos[1] + move[1];\n                if (col < 1 || col > 8) {\n                    break;\n                }\n                const newPos: Field = [row, col];\n\n                if (this.get(newPos) !== null) {\n                    break;\n                }\n                moves.push([row, col]);\n                indexOfMove += 1;\n            }\n        })\n\n        return moves;\n    }\n\n    public possibleAttacksFor(pos: Field): Field[] {\n        const attacks: Field[] = [];\n        const chessman = this.get(pos);\n\n        if (chessman === null) {\n            return attacks;\n        }\n\n        chessman.attackVectors.forEach(vector => {\n            let indexOfMove = 0;\n            while (indexOfMove < vector.length) {\n                const move = vector[indexOfMove];\n\n                const row = pos[0] + move[0];\n                if (row < 1 || row > 8) {\n                    break;\n                }\n                const col = pos[1] + move[1];\n                if (col < 1 || col > 8) {\n                    break;\n                }\n                const newPos: Field = [row, col];\n                const target = this.get(newPos);\n\n                if (target !== null) {\n                    if (target.color !== chessman.color) attacks.push([row, col]);\n                    break;\n                }\n                indexOfMove += 1;\n            }\n        })\n\n        return attacks;\n    }\n\n    private setRooks(color: Color) {\n        return [...new Array(8)].map(x => new RookModel(color));\n    }\n\n    private setFirstRow(color: Color) {\n        return [\n            new TowerModel(color),\n            new KnightModel(color),\n            new BishopModel(color),\n            new QueenModel(color),\n            color === Color.Black ? this.blackKing : this.whiteKing,\n            new BishopModel(color),\n            new KnightModel(color),\n            new TowerModel(color)\n        ];\n    }\n\n    public setBoard() {\n        return [\n            this.setFirstRow(Color.Black),\n            this.setRooks(Color.Black),\n            ...(Array.from({ length: 4 }, e => Array(8).fill(null))),\n            this.setRooks(Color.White),\n            this.setFirstRow(Color.White),\n        ]\n    }\n\n\n\n    public isMate(color: Color): boolean {\n        return false;\n    }\n\n    public isCheckMate(color: Color): boolean {\n        return false;\n    }\n}","import BoardModel from '../Models/boardModel';\nimport { Color, Field, FigureType, IFigure } from '../Models/figureInterface';\n\nexport default class BoardView {\n\n    public init(parent: HTMLElement, boardModel: BoardModel, clickHandler: (pos: Field) => void): void {\n        const board = document.createElement('div');\n        board.classList.add('chessboard');\n\n        boardModel.board.forEach((row, index_y) => {\n            row.forEach((figure, index_x) => {\n                const field = document.createElement('div');\n\n                field.dataset.x = 1 + index_x + '';\n                field.dataset.y = 8 - index_y + '';\n\n                field.addEventListener('click', () => {\n                    const fieldPos: Field = [parseInt(field.dataset.x), parseInt(field.dataset.y)];\n                    clickHandler(fieldPos);\n                })\n\n                field.classList.add('chessboard__field');\n                if (figure) {\n                    const figureImage = this.getFigureImage(figure);\n                    field.appendChild(figureImage);\n\n                }\n                board.appendChild(field);\n            });\n        });\n        parent.appendChild(board);\n    }\n\n    private getFigureImage(figure: IFigure): HTMLElement {\n        const figureImg = document.createElement('img');\n\n        //Map figure to file name\n        const file = figure.color + figure.name;\n\n        figureImg.setAttribute('src', `./static/assets/pieces/kosal/${file}.svg`);\n        figureImg.setAttribute('alt', `${figure.color} ${figure.name}`);\n\n        figureImg.classList.add('chessboard__figure');\n\n        return figureImg;\n    }\n\n    private resetField(pos: Field): void {\n        const field = this.getField(pos);\n        field.innerHTML = '';\n        field.classList.value = '';\n        field.classList.add('chessboard__field');\n    }\n\n    private setFigureOnField(pos: Field, figure: IFigure): void {\n        const field = this.getField(pos);\n        const figureImage = this.getFigureImage(figure);\n        field.innerHTML = '';\n        field.appendChild(figureImage);\n    }\n\n    public getField(pos: Field): Element {\n        const field = document.querySelector(`[data-x=\"${pos[0]}\"][data-y=\"${pos[1]}\"]`);\n\n        return field;\n    }\n\n    public move(start: Field, end: Field, figure: IFigure):void{\n        this.setFigureOnField(end, figure);\n        this.resetField(start);\n        this.resetStyles();\n    }\n\n\n    public setAsPossibleToMove(pos: Field): void {\n        const field = this.getField(pos);\n        field.classList.add('chessboard__field--possible_move');\n    }\n\n    public setAsPossibleToAttack(pos: Field): void {\n        const field = this.getField(pos);\n        field.classList.add('chessboard__field--possible_attack');\n    }\n\n    public setAsSelected(pos: Field): void {\n        const field = this.getField(pos);\n        field.classList.add('chessboard__field--selected');\n    }\n\n    public resetStyles() {\n        const fields = document.querySelectorAll('.chessboard__field');\n        fields.forEach(field => {\n            field.classList.value = '';\n            field.classList.add('chessboard__field');\n        })\n    }\n}","\nimport BoardModel from '../Models/boardModel';\nimport { Color, Field, IFigure } from '../Models/figureInterface';\nimport BoardView from '../Views/boardView';\n\nexport default class BoardController {\n    private view: BoardView;\n    private board: BoardModel;\n    private parent: HTMLElement;\n    private selectedField: Field | null;\n    private movesForSelected: Field[];\n    private attacksForSelected: Field[];\n    private moveFor: Color;\n\n    constructor(parent: HTMLElement) {\n        this.parent = parent;\n        this.board = new BoardModel();\n        this.view = new BoardView();\n        this.moveFor = Color.White;\n        this.selectedField = null;\n        this.movesForSelected = [];\n        this.attacksForSelected = [];\n    }\n\n    private isFieldOnList(pos: Field, list: Field[]): boolean {\n        return !(list.every(elem => elem[0] !== pos[0] || elem[1] !== pos[1]));\n    }\n\n    private selectNewPos(pos: Field): void {\n        this.view.resetStyles();\n\n        this.selectedField = pos;\n        this.movesForSelected = this.board.possibleMovesFor(this.selectedField);\n        this.attacksForSelected = this.board.possibleAttacksFor(this.selectedField);\n\n        this.view.setAsSelected(pos);\n        this.movesForSelected.forEach(field => {\n            this.view.setAsPossibleToMove(field);\n        });\n        this.attacksForSelected.forEach(field => {\n            this.view.setAsPossibleToAttack(field);\n        });\n    }\n\n    private resetSelectedPos() {\n        this.view.resetStyles();\n        this.selectedField = null;\n        this.movesForSelected = [];\n        this.attacksForSelected = [];\n    }\n\n    private makeMove(start: Field, end: Field, figure: IFigure): void {\n        this.view.move(start, end, figure);\n        this.board.move(start, end);\n    }\n\n    public setBoard(): void {\n        this.view.init(this.parent, this.board, this.clickOnField);\n        this.moveFor = Color.White;\n    }\n\n    private clickOnField = (pos: Field): void => {\n        //We have selected figure already\n        if (this.selectedField) {\n            this.figureAlreadySelected(pos, this.selectedField);\n        } else {\n            this.figureNotSelected(pos);\n        }\n    }\n\n    private figureNotSelected(pos: Field): void {\n        //We didn't select figure yet\n        const figure = this.board.get(pos);\n\n        //We clicked on our figure\n        if (figure && figure.color === this.moveFor) {\n            this.selectNewPos(pos);\n        }\n    }\n\n    private figureAlreadySelected(pos: Field, selected: Field): void {\n        const clickedFigure = this.board.get(pos);\n\n        //we clicked another figure and have selected one\n        const figure = this.board.get(selected);\n        if (clickedFigure && figure) {\n            //it is our figure\n            if (clickedFigure.color === figure.color) {\n                this.selectNewPos(pos);\n                return;\n            } else {\n                //it is enemy figure\n                //we can attack this figure\n                if (this.isFieldOnList(pos, this.attacksForSelected)) {\n                    console.log('ATTACK');\n                }\n            }\n        } else if (figure && this.isFieldOnList(pos, this.movesForSelected)) {\n            //we clicked empty field\n            //we can move on this field\n            this.makeMove(selected, pos, figure);\n        }\n        this.resetSelectedPos();\n    }\n}","import BoardController from \"./Controllers/boardController\";\n\nexport default function App(): void {\n    if (!!process.env.DEBUG) console.log('Start Chess App...');\n    const root = document.getElementById('root');\n\n    const controller = new BoardController(root!);\n    controller.setBoard();\n}","import App from './App/App';\n\nApp();"]}