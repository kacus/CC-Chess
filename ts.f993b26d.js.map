{"version":3,"sources":["ts/App/Models/pieces/figureInterface.ts","ts/App/Models/pieces/kingModel.ts","ts/App/Models/pieces/knightModel.ts","ts/App/Models/pieces/pawnModel.ts","ts/App/Models/pieces/rookModel.ts","ts/App/Models/pieces/bishopModel.ts","ts/App/Models/pieces/queenModel.ts","ts/App/Models/pieces/index.ts","ts/App/Models/boardModel.ts","ts/App/Models/savesModels/saveOfCastling.ts","ts/App/Models/savesModels/saveOfMove.ts","ts/App/Views/stageView.ts","ts/App/Views/menu.ts","ts/App/Views/tabsView.ts","ts/App/Views/boardView.ts","ts/App/Controllers/moveSaver.ts","ts/App/Views/movesList.ts","ts/App/Views/endGameView.ts","ts/App/Controllers/boardController.ts","ts/App/App.ts","ts/index.ts"],"names":[],"mappings":"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","file":"ts.f993b26d.js","sourceRoot":"../src","sourcesContent":["import { type } from \"os\";\n\nexport enum EColor {\n    Black = 'b',\n    White = 'w'\n};\n\nexport enum EFigureType {\n    Pawn = 'p',\n    Rook = 'r',\n    Bishop = 'b',\n    Knight = 'n',\n    Queen = 'q',\n    King = 'k'\n};\n\nexport type TField = [number, number];\nexport type TListOfVectors = TField[][];\n\n\nexport interface IFigure {\n    readonly color: EColor;\n    readonly name: EFigureType;\n    isMoved: boolean; //is this figure already moved in current game\n    moveVectors: TListOfVectors;\n    attackVectors: TListOfVectors;\n    move(): void;\n    setAsUnmoved(): void;\n};","import { IFigure, EColor, EFigureType, TListOfVectors } from './figureInterface';\n\nexport default class KingModel implements IFigure {\n    public readonly color: EColor;\n    public readonly name: EFigureType;\n    public isMoved: boolean;\n    public moveVectors: TListOfVectors;\n    public attackVectors: TListOfVectors;\n\n    constructor(color: EColor) {\n        this.color = color;\n        this.name = EFigureType.King;\n        this.moveVectors = [\n            [[-1, -1]],\n            [[-1, 0]],\n            [[-1, 1]],\n            [[0, -1]],\n            [[0, 0]],\n            [[0, 1]],\n            [[1, -1]],\n            [[1, 0]],\n            [[1, 1]],\n        ];\n        this.attackVectors = this.moveVectors;\n        this.isMoved = false;\n    }\n\n    public move() {\n        this.isMoved = true;\n    }\n\n    public setAsUnmoved():void {\n        this.isMoved = false;\n    }\n}","import { IFigure, EColor, EFigureType, TListOfVectors } from './figureInterface';\n\nexport default class KnightModel implements IFigure {\n    public readonly color: EColor;\n    public readonly name: EFigureType;\n    public isMoved: boolean;\n    public moveVectors: TListOfVectors;\n    public attackVectors: TListOfVectors;\n\n    constructor(color: EColor) {\n        this.color = color;\n        this.name = EFigureType.Knight;\n        this.moveVectors = [\n            [[-2, -1]],\n            [[-2, 1]],\n            [[-1, 2]],\n            [[-1, -2]],\n            [[1, 2]],\n            [[1, -2]],\n            [[2, -1]],\n            [[2, 1]],\n        ];\n        this.attackVectors = this.moveVectors;\n        this.isMoved = false;\n    }\n\n    public move() {\n        this.isMoved = true;\n    }\n\n    public setAsUnmoved():void {\n        this.isMoved = false;\n    }\n}","import { IFigure, EColor, EFigureType, TListOfVectors } from './figureInterface';\n\nexport default class RookModel implements IFigure {\n    public readonly color: EColor;\n    public readonly name: EFigureType;\n    public isMoved: boolean;\n    public moveVectors: TListOfVectors;\n    public attackVectors: TListOfVectors;\n\n    constructor(color: EColor) {\n        this.color = color;\n        this.name = EFigureType.Pawn;\n        const reverse: number = this.color === EColor.White ? 1 : -1;\n        this.moveVectors = [\n            [[0, 1 * reverse], [0, 2 * reverse]]\n        ];\n        this.attackVectors = [\n            [[1, reverse]],\n            [[-1, reverse]]\n        ];\n        this.isMoved = false;\n    }\n\n    public move() {\n        this.isMoved = true;\n        const reverse: number = this.color === EColor.White ? 1 : -1;\n        this.moveVectors = [\n            [[0, 1 * reverse]]\n        ];\n    }\n\n    public setAsUnmoved(): void {\n        this.isMoved = false;\n        const reverse: number = this.color === EColor.White ? 1 : -1;\n        this.moveVectors = [\n            [[0, 1 * reverse], [0, 2 * reverse]]\n        ];\n    }\n}","import { IFigure, EColor, EFigureType, TListOfVectors } from './figureInterface';\n\nexport default class TowerModel implements IFigure {\n    public readonly color: EColor;\n    public readonly name: EFigureType;\n    public isMoved: boolean;\n    public moveVectors: TListOfVectors;\n    public attackVectors: TListOfVectors;\n\n    constructor(color: EColor) {\n        this.color = color;\n        this.name = EFigureType.Rook;\n        this.moveVectors = [\n            [[1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0]], //top\n            [[-1, 0], [-2, 0], [-3, 0], [-4, 0], [-5, 0], [-6, 0], [-7, 0]], //bottom\n            [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7]], //right\n            [[0, -1], [0, -2], [0, -3], [0, -4], [0, -5], [0, -6], [0, -7]] //left\n        ];\n        this.attackVectors = this.moveVectors;\n        this.isMoved = false;\n    }\n\n    public move() {\n        this.isMoved = true;\n    }\n\n    public setAsUnmoved():void {\n        this.isMoved = false;\n    }\n}","import { IFigure, EColor, EFigureType, TListOfVectors } from './figureInterface';\n\nexport default class BishopModel implements IFigure {\n    public readonly color: EColor;\n    public readonly name: EFigureType;\n    public isMoved: boolean;\n    public moveVectors: TListOfVectors;\n    public attackVectors: TListOfVectors;\n\n    constructor(color: EColor) {\n        this.color = color;\n        this.name = EFigureType.Bishop;\n        this.moveVectors = [\n            [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7]], //right-bottom\n            [[-1, 1], [-2, 2], [-3, 3], [-4, 4], [-5, 5], [-6, 6], [-7, 7]], //right-top\n            [[-1, -1], [-2, -2], [-3, -3], [-4, -4], [-5, -5], [-6, -6], [-7, -7]], //left-top\n            [[1, -1], [2, -2], [3, -3], [4, -4], [5, -5], [6, -6], [7, -7]], //left-bottom\n        ];\n        this.attackVectors = this.moveVectors;\n        this.isMoved = false;\n    }\n\n    public move() {\n        this.isMoved = true;\n    }\n\n    public setAsUnmoved(): void {\n        this.isMoved = false;\n    }\n}","import { IFigure, EColor, EFigureType, TListOfVectors } from './figureInterface';\n\nexport default class QueenModel implements IFigure {\n    public readonly color: EColor;\n    public readonly name: EFigureType;\n    public isMoved: boolean;\n    public moveVectors: TListOfVectors;\n    public attackVectors: TListOfVectors;\n\n    constructor(color: EColor) {\n        this.color = color;\n        this.name = EFigureType.Queen;\n        this.moveVectors = [\n            [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7]], //right-bottom\n            [[-1, 1], [-2, 2], [-3, 3], [-4, 4], [-5, 5], [-6, 6], [-7, 7]], //right-top\n            [[-1, -1], [-2, -2], [-3, -3], [-4, -4], [-5, -5], [-6, -6], [-7, -7]], //left-top\n            [[1, -1], [2, -2], [3, -3], [4, -4], [5, -5], [6, -6], [7, -7]], //left-bottom\n            [[1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0]], //bottom\n            [[-1, 0], [-2, 0], [-3, 0], [-4, 0], [-5, 0], [-6, 0], [-7, 0]], //top\n            [[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7]], //right\n            [[0, -1], [0, -2], [0, -3], [0, -4], [0, -5], [0, -6], [0, -7]] //left\n        ];\n        this.attackVectors = this.moveVectors;\n        this.isMoved = false;\n    }\n\n    public move() {\n        this.isMoved = true;\n    }\n\n    public setAsUnmoved():void {\n        this.isMoved = false;\n    }\n}","import KingModel from './kingModel';\nimport KnightModel from './knightModel';\nimport PawnModel from './pawnModel';\nimport RookModel from './rookModel';\nimport BishopModel from './bishopModel';\nimport QueenModel from './queenModel';\n\nexport {\n    KingModel,\n    KnightModel,\n    PawnModel,\n    RookModel,\n    BishopModel,\n    QueenModel\n}","import { copyFile } from 'fs';\nimport IBoard from './boardInterface';\nimport { IFigure, EColor, TField, EFigureType } from './pieces/figureInterface';\nimport {\n    KingModel,\n    KnightModel,\n    PawnModel,\n    RookModel,\n    BishopModel,\n    QueenModel\n} from './pieces/index';\n\nimport { MoveSaver } from '../Controllers/moveSaver'\nimport SaveOfMove from './savesModels/saveOfMove';\n\n\nexport default class BoardModel implements IBoard {\n    public board: (IFigure | null)[][] = this.setBoard();\n\n    constructor() {\n    }\n\n    public move(start: TField, end: TField): void {\n        const figure = this.get(start);\n        if (figure) {\n            figure.move();\n        }\n        this.set(end, figure);\n        this.resetField(start);\n    }\n\n    public get(pos: TField): (IFigure | null) {\n        return this.board[8 - pos[1]][pos[0] - 1];\n    }\n\n    public set(pos: TField, figure: IFigure | null): void {\n        this.board[8 - pos[1]][pos[0] - 1] = figure;\n    }\n\n    public resetField(pos: TField): void {\n        this.set(pos, null);\n    }\n\n    public possibleMovesFor(pos: TField): TField[] {\n\n        const moves: TField[] = [];\n        const figure = this.get(pos);\n        if (figure === null) {\n            return moves;\n        }\n\n        figure.moveVectors.forEach(vector => {\n            let indexOfMove = 0;\n            while (indexOfMove < vector.length) {\n                const move = vector[indexOfMove];\n\n                const row = pos[0] + move[0];\n                if (row < 1 || row > 8) {\n                    break;\n                }\n\n                const col = pos[1] + move[1];\n                if (col < 1 || col > 8) {\n                    break;\n                }\n\n                const newPos: TField = [row, col];\n\n                if (this.get(newPos) !== null) {\n                    break;\n                }\n\n                //check if move cause 'check'\n                if (!this.simulateMove(figure.color, pos, newPos)) {\n                    break;\n                }\n\n\n                moves.push([row, col]);\n                indexOfMove += 1;\n            }\n        })\n\n        return moves;\n    }\n\n\n    public possibleAttacksFor(pos: TField, moveSaver?: MoveSaver): TField[] {\n\n        \n        const attacks: TField[] = [];\n        const figure = this.get(pos);\n\n\n        if (figure === null) {\n            return attacks;\n        }\n\n\n        figure.attackVectors.forEach(vector => {\n            let indexOfMove = 0;\n            while (indexOfMove < vector.length) {\n                const move = vector[indexOfMove];\n\n                const row = pos[0] + move[0];\n                if (row < 1 || row > 8) {\n                    break;\n                }\n                const col = pos[1] + move[1];\n                if (col < 1 || col > 8) {\n                    break;\n                }\n                const newPos: TField = [row, col];\n                const target = this.get(newPos);\n\n                if (target !== null) {\n                    if (target.color !== figure.color) {\n                        attacks.push([row, col]);\n                    }\n                    break;\n                }\n                indexOfMove += 1;\n            }\n        });\n\n\n        if(moveSaver){\n            const addEnPassantField = moveSaver.isEnPassantPossible(figure, pos, this.deepCopy());\n\n            if(addEnPassantField.length>0){ \n                attacks.push(addEnPassantField[0] as TField);\n            }\n        }\n        \n        return attacks;\n    }\n\n    public setBoard(): (IFigure | null)[][] {\n        return [\n            this.setFirstLine(EColor.Black),\n            this.setPawns(EColor.Black),\n            ...(Array.from({ length: 4 }, _ => Array(8).fill(null))),\n            this.setPawns(EColor.White),\n            this.setFirstLine(EColor.White),\n        ]\n    }\n\n    private setPawns(color: EColor): (IFigure | null)[] {\n        return [...new Array(8)].map(x => new PawnModel(color));\n    }\n\n    private setFirstLine(color: EColor): (IFigure | null)[] {\n        return [\n            new RookModel(color),\n            new KnightModel(color),\n            new BishopModel(color),\n            new QueenModel(color),\n            color === EColor.White ? new KingModel(EColor.White) : new KingModel(EColor.Black),\n            new BishopModel(color),\n            new KnightModel(color),\n            new RookModel(color)\n        ]\n    }\n\n    private deepCopy(): BoardModel {\n        const copy = new BoardModel();\n        copy.board = [];\n        this.board.forEach(line => {\n            const row: (IFigure | null)[] = [];\n            line.forEach(figure => {\n                if (figure) {\n                    const copyOfFigure = Object.assign(Object.create(Object.getPrototypeOf(figure)), figure);\n                    row.push(copyOfFigure);\n                    return;\n                } else {\n                    row.push(null);\n                }\n\n            });\n            copy.board.push(row);\n        });\n        return copy;\n    }\n\n    //Is king in check\n    public isCheck(color: EColor): boolean {\n        for (let y = 1; y <= 8; y++) {\n            for (let x = 1; x <= 8; x++) {\n                const pos: TField = [x, y];\n                const figure = this.get(pos);\n                if (figure && figure.color !== color) {\n                    const attackedFields = this.possibleAttacksFor(pos);\n                    for (let z = 0; z < attackedFields.length; z++) {\n                        const attackedFigure = this.get(attackedFields[z])!;\n                        if (attackedFigure.name === EFigureType.King && attackedFigure.color === color) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    public isCheckMate(color: EColor): boolean {\n        if (!this.isCheck(color)) return false;\n\n        for (let y = 1; y <= 8; y++) {\n            for (let x = 1; x <= 8; x++) {\n                const pos: TField = [x, y];\n                const figure = this.get(pos);\n                if (figure && figure.color === color) {\n                    //check if attack can save king\n                    let attackedFields = this.possibleAttacksFor(pos);\n                    attackedFields = attackedFields.filter(attack => {\n                        return this.simulateMove(color, pos, attack);\n                    });\n                    if (attackedFields.length > 0) return false;\n                    //check if move can save king\n                    const fieldsToMove = this.possibleMovesFor(pos);\n                    if (fieldsToMove.length > 0) return false;\n                }\n            }\n        }\n        console.log('CHECK MATE!');\n        return true;\n    }\n\n    // check if move can be made for given color\n    public simulateMove(color: EColor, from: TField, to: TField): boolean {\n        const copy = this.deepCopy();\n        copy.move(from, to);\n\n        //return false if move will cause 'check', return true otherwise\n        return !copy.isCheck(color);\n    }\n\n\n\n\n\n\n}","import boardView from \"../../Views/boardView\";\nimport boardModel from \"../boardModel\";\nimport { EColor, TField } from \"../pieces/figureInterface\";\nimport ISaveOf from \"./ISaveOf\";\n\nexport default class SaveOfCastling implements ISaveOf {\n    public color: EColor;\n    isKingSide: boolean;\n\n    constructor(color: EColor, isKingSide: boolean) {\n        this.color = color;\n        this.isKingSide = isKingSide;\n    }\n\n    printMove(): string {\n        const color = this.color === EColor.White ? 'White' : 'Black';\n        const sideOfCastling = this.isKingSide ? 'King Side' : 'Queen Side';\n        return `${color} did ${sideOfCastling} Castling!`;\n    }\n    \n    revert(model: boardModel, view: boardView): void {\n        const row = this.color === EColor.White ? 1 : 8;\n\n        const initKingPos: TField = this.isKingSide ? [7, row] : [2, row];\n        const initRookPos: TField = this.isKingSide ? [6, row] : [3, row];\n\n        const newKingPos: TField = [5, row];\n        const newRookPos: TField = this.isKingSide ? [8, row] : [1, row];\n\n        const king = model.get(initKingPos)!;\n        const rook = model.get(initRookPos)!;\n\n        //revert king\n        view.move(initKingPos,newKingPos, king);\n        king.setAsUnmoved();\n        \n        model.set(newKingPos, king);\n        model.resetField(initKingPos);\n\n        //revert rook\n        model.set(newRookPos, rook);\n        model.resetField(initRookPos);\n\n        view.move(initRookPos, newRookPos, rook);\n        rook.setAsUnmoved();\n    }\n}","import {\n  EColor,\n  EFigureType,\n  IFigure,\n  TField,\n} from \"../pieces/figureInterface\";\nimport BoardView from \"../../Views/boardView\";\nimport BoardModel from \"../boardModel\";\nimport ISaveOf from \"./ISaveOf\";\n\nexport default class SaveOfMove implements ISaveOf {\n  private moveFor: EColor;\n  private movedFigure: IFigure;\n  private wasMovedFigureUnmoved: boolean;\n  private from: TField;\n  private to: TField;\n  private attacked?: IFigure;\n  private wasAttackedFigureUnmoved?: boolean;\n  private enemyField?: TField;\n\n  constructor(\n    color: EColor,\n    moved: IFigure,\n    from: TField,\n    to: TField,\n    attacked?: IFigure,\n    enemyField?: TField\n  ) {\n    this.moveFor = color;\n    this.movedFigure = moved;\n    this.from = from;\n    this.to = to;\n    this.wasMovedFigureUnmoved = moved.isMoved;\n    if (attacked) {\n      this.attacked = attacked;\n      this.wasAttackedFigureUnmoved = attacked.isMoved;\n    }\n    if (enemyField) {\n      this.enemyField = enemyField;\n    }\n  }\n\n  public printMove(): string {\n    const color: string =\n      this.movedFigure.color === EColor.White ? \"White\" : \"Black\";\n    let figureName: string = \"\";\n    switch (this.movedFigure.name) {\n      case EFigureType.Pawn:\n        figureName = \"Pawn\";\n        break;\n      case EFigureType.Rook:\n        figureName = \"Rook\";\n        break;\n      case EFigureType.Knight:\n        figureName = \"Knight\";\n        break;\n      case EFigureType.Bishop:\n        figureName = \"Bishop\";\n        break;\n      case EFigureType.Queen:\n        figureName = \"Queen\";\n        break;\n      case EFigureType.King:\n        figureName = \"King\";\n        break;\n    }\n\n    let result = `${color} ${figureName} moved from ${this.fieldToHumanNotation(\n      this.from\n    )} to ${this.fieldToHumanNotation(this.to)}!`;\n    if (this.attacked) {\n      const enemyColor: string =\n        this.attacked.color === EColor.White ? \"White\" : \"Black\";\n      let enemyFigureName: string = \"\";\n      switch (this.attacked.name) {\n        case EFigureType.Pawn:\n          enemyFigureName = \"Pawn\";\n          break;\n        case EFigureType.Rook:\n          enemyFigureName = \"Rook\";\n          break;\n        case EFigureType.Knight:\n          enemyFigureName = \"Knight\";\n          break;\n        case EFigureType.Bishop:\n          enemyFigureName = \"Bishop\";\n          break;\n        case EFigureType.Queen:\n          enemyFigureName = \"Queen\";\n          break;\n        case EFigureType.King:\n          enemyFigureName = \"King\";\n          break;\n      }\n\n      result += ` And destroyed ${enemyColor} ${enemyFigureName}!`;\n    }\n\n    return result;\n  }\n\n  public revert(model: BoardModel, view: BoardView): void {\n    //revert move\n    if (!this.wasMovedFigureUnmoved) {\n      this.movedFigure.setAsUnmoved();\n    }\n    model.set(this.from, this.movedFigure);\n    model.resetField(this.to);\n    view.move(this.to, this.from, this.movedFigure);\n\n    //revert attack\n    if (this.attacked) {\n      if (!this.wasAttackedFigureUnmoved) {\n        this.attacked.setAsUnmoved();\n      }\n      if (this.enemyField) {\n        model.set(this.enemyField, this.attacked);\n        view.setFigureOnField(this.enemyField, this.attacked);\n        model.set(this.to, null);\n        // view.setFigureOnField(this.to,);\n      } else {\n        model.set(this.to, this.attacked);\n        view.setFigureOnField(this.to, this.attacked);\n      }\n    }\n    const color =\n      this.attacked?.color === EColor.Black ? \"last-of-type\" : \"first-of-type\";\n    const figType = this.attacked?.name;\n\n    const getEnumKeyByEnumValue = (myEnum: any, enumValue: string): string => {\n      const keys = Object.keys(myEnum).filter((x) => myEnum[x] == enumValue);\n      return keys.length > 0 ? keys[0] : \"\";\n    };\n\n    if (figType) {\n      const figureName: string = getEnumKeyByEnumValue(EFigureType, figType);\n      const allBeatenFiguresOfType = document.querySelectorAll<HTMLElement>(\n        `.stage:${color} > .game__stage>.figures__list > .${figureName}:not(.${figType})`\n      )!;\n      const array = Array.from(allBeatenFiguresOfType);\n      const lastElement = array[array.length - 1];\n      lastElement.style.filter = \"invert(0.5)\";\n      lastElement.classList.add(`${figType}`);\n    }\n  }\n\n  private fieldToHumanNotation(field: TField): string {\n    let result = `${String.fromCharCode(65 + field[0] - 1)}${field[1]}`;\n\n    return result;\n  }\n\n  public getLastMove() {\n    return {\n      from: this.from,\n      to: this.to,\n      moveFor: this.moveFor,\n    };\n  }\n}\n","import { EColor, EFigureType, IFigure } from \"../Models/pieces/figureInterface\";\n\ntype FigureImage = {\n  color: EColor;\n  name: EFigureType;\n};\n\nexport default class StageView {\n  id: string\n  constructor(id: string){\n    this.id= id;\n  }\n  public init(parent: HTMLElement, color: EColor, player: string) {\n    const playerName = document.createElement(\"div\");\n    const time = document.createElement(\"div\");\n    time.classList.add(\"time\");\n    time.innerText='00:00 min'\n    const figures = document.createElement(\"div\");\n    const game = document.createElement(\"div\");\n    game.classList.add(\"game__stage\");\n    figures.classList.add(\"figures__list\");\n\n    this.createFigure(\"Pawn\", 8, color, figures);\n    this.createFigure(\"Bishop\", 2, color, figures);\n    this.createFigure(\"Knight\", 2, color, figures);\n    this.createFigure(\"Rook\", 2, color, figures);\n    this.createFigure(\"Queen\", 1, color, figures);\n\n    playerName.classList.add(\"player__name\");\n    playerName.innerText = player\n    playerName.id = this.id\n\n    parent.appendChild(game);\n    game.appendChild(playerName);\n    game.appendChild(figures);\n    parent.appendChild(time);\n  }\n\n  private getFigureImage(figure: FigureImage): HTMLElement {\n    const figureImg = document.createElement(\"img\");\n\n    //Map figure to file name\n    const file = figure.color + figure.name;\n\n    figureImg.setAttribute(\"src\", `./static/assets/pieces/kosal/${file}.svg`);\n    figureImg.setAttribute(\"alt\", `${figure.color} ${figure.name}`);\n\n    figureImg.classList.add(\"chessboard__figure__stage\");\n\n    return figureImg;\n  }\n\n  private createFigure(\n    figureType: keyof typeof EFigureType,\n    repeat: number,\n    color: EColor,\n    parent: HTMLDivElement\n  ) {\n    for (let i = 0; i < repeat; i++) {\n      const name = EFigureType[figureType];\n      const figure: FigureImage = { color, name };\n      const figureImage = this.getFigureImage(figure);\n      figureImage.classList.add(EFigureType[figureType].toLowerCase());\n      figureImage.classList.add(figureType+\"\");\n      parent.appendChild(figureImage);\n    }\n  }\n}\n","import IMenu from './menuInterface';\nexport default class MenuView implements IMenu {\n    parent: HTMLElement;\n    constructor(parent: HTMLElement) {\n        this.parent = parent;\n    };\n\n    createElement(tag: string, className?: string) {\n        const element = document.createElement(tag);\n        if (className) {\n            element.classList.add(className);\n        }\n        return element;\n    };\n\n    private createMenuWraper(element: HTMLElement){\n        const menu_wraper = this.createElement('div', 'menu');\n        this.createMenuBackground(menu_wraper);\n        this.createBtnBox(menu_wraper);\n        element.appendChild(menu_wraper);\n    };\n       \n    private createMenuBackground(element: HTMLElement){\n        const menu_background = this.createElement('div', 'menu__background');\n        this.createSettingPlayers(menu_background);\n        this.createSettingBox(menu_background);\n        element.appendChild(menu_background);\n    };\n\n    private createBtnBox(element: HTMLElement){\n        const btn_box = this.createElement('div', 'menu__button');\n        const btn_start = this.createElement('button', 'menu__button--start');\n        btn_start.setAttribute('id', \"menu__button--start\");\n        btn_start.innerText = \"START THE GAME\";\n        btn_box.append(btn_start);\n        element.appendChild(btn_box);\n\n    };\n\n\n    private createSettingPlayers(element: HTMLElement){\n        const setting_players = this.createElement('div', 'setting__players');\n        const setting_players_text = this.createElement('div', 'setting__players--text');\n        setting_players_text.innerText = 'PLAYERS SETTING';\n        setting_players.appendChild(setting_players_text);\n        \n        const players_box = this.createElement('div', 'setting__players--box');\n        const players_box_text = this.createElement('div', 'setting__players--text');\n        players_box_text.innerText = \"PLAYERS NAMES\";\n        const players = this.createElement('div', 'setting__players--players');\n\n        const first_player = this.createElement('div', 'players--one_player');\n        const white = this.createElement('div', 'white_player');\n        white.innerText = \"Black | Player's name\"\n        const insert_name_first = this.createElement('input', 'insert__name') as HTMLInputElement;\n        insert_name_first.setAttribute('type', 'text');\n        insert_name_first.setAttribute('maxlength', '20');\n        insert_name_first.setAttribute('pattern', '[a-zA-Z0-9]{3,20}');\n        first_player.append(white, insert_name_first);\n        insert_name_first.addEventListener('change', ()=>{\n            const element:HTMLInputElement = document.getElementById('first__player')! as HTMLInputElement;\n            element.innerText = insert_name_first.value\n        })\n\n        const second_player = this.createElement('div', 'players--one_player');\n        const black = this.createElement('div', 'black_player');\n        black.innerText = \"White | Player's name\"\n        const insert_name_second = this.createElement('input', 'insert__name') as HTMLInputElement;\n        insert_name_second.setAttribute('type', 'text');\n        insert_name_second.setAttribute('maxlength', '20');\n        insert_name_second.setAttribute('pattern', '[a-zA-Z0-9]{3,20}');\n        second_player.append(black, insert_name_second);\n        insert_name_second.addEventListener('change', ()=>{\n            const element:HTMLInputElement = document.getElementById('second__player')! as HTMLInputElement;\n            element.innerText = insert_name_second.value\n        })\n\n        players.append(first_player, second_player);\n        players_box.append(players_box_text, players);\n        setting_players.appendChild(players_box)\n        this.createRadio(setting_players);\n        element.appendChild(setting_players);\n    };\n\n    private createRadio(element: HTMLElement) {\n        const form_checkbox = this.createElement('form', 'setting__players--form_checkbox');\n\n        const checkbox_move = this.createElement('input');\n        checkbox_move.setAttribute('type','checkbox');\n        checkbox_move.setAttribute('id','possible move');\n        checkbox_move.setAttribute('name','possible move');\n        const span_move = this.createElement('span', 'checkmark');\n\n        const label_move = this.createElement('label', 'checkbox');\n        label_move.setAttribute('for','possible move');\n        label_move.innerText = 'Show possible moves';\n\n        label_move.append(checkbox_move, span_move);\n        form_checkbox.append( label_move);\n\n        element.appendChild(form_checkbox);\n    };\n\n    private createSettingBox(element: HTMLElement){\n        const setting_box = this.createElement('div', 'setting__box');\n        this.createSettingGame(setting_box);\n        this.createTimeGame(setting_box);\n        element.appendChild(setting_box);\n    };\n\n    private createSettingGame(element: HTMLElement){\n        const setting_game = this.createElement('div', 'setting--game');\n        const setting_text = this.createElement('div', 'setting__game--text');\n        setting_text.innerText ='GAME SETTINGS';\n        setting_game.append(setting_text);\n\n        element.appendChild(setting_game);\n    };\n\n    private createTimeGame(element: HTMLElement){\n        const time_game = this.createElement('div', 'setting--tame');\n        time_game.innerText = 'GAME TIME'\n        const span_tg = this.createElement('span');\n        span_tg.innerText = '(IN MINUTES)';\n        time_game.appendChild(span_tg);\n\n        const slider_box = this.createElement('div', 'setting--slider');\n        const slider = this.createElement('input', 'slider__range');\n        slider.setAttribute('type', 'range');\n        slider.setAttribute('name', 'range_time');\n        slider.setAttribute('min', '2');\n        slider.setAttribute('max', '15');\n        slider.setAttribute('step', '1');\n        slider.setAttribute('value', '5');\n        slider.setAttribute('id', 'range');\n\n        const slider_time = this.createElement('output');\n        slider_time.setAttribute('id', 'range_display');\n        slider_time.setAttribute('name', 'range_display');\n        slider_time.setAttribute('for', 'range_time');\n        slider_time.textContent = `Game time is: ${slider.getAttribute('value')} minutes`\n        slider_box.append(slider, slider_time);\n        \n        element.append(time_game, slider_box);\n    };\n\n    private createAddEventListner() {\n        const t = document.getElementById('range')!;\n        t.addEventListener(\"input\", () => {\n            this.addTime();\n        });\n        t.addEventListener(\"change\", () => {\n            this.addTime()\n        });\n    }\n\n    private addTime() {\n        const sliderValue = (<HTMLInputElement>document.getElementById('range')).value;\n        const outputElement = <HTMLElement>document.getElementById('range_display');\n        outputElement.innerText = `Game time is: ${sliderValue} minutes`;\n    };\n\n    display(){\n        this.createMenuWraper(this.parent);\n       \n        this.createAddEventListner();    \n    };\n};\n","import MenuView from \"./menu\";\nimport MovesList from \"./movesList\";\n\nexport default class TabsView {\n  public init(parent: HTMLElement) {\n    const tabContainer = this.createElement(\"div\", \"tab__container\");\n    parent.appendChild(tabContainer);\n    this.createNavigation(tabContainer);\n    this.createTabs(tabContainer);\n  }\n  private createElement(tag: string, className?: string) {\n    const element = document.createElement(tag);\n    if (className) {\n      element.classList.add(className);\n    }\n    return element;\n  }\n  private createNavigation(tabContainer: HTMLElement) {\n    const ul = this.createElement(\"ul\", \"nav\");\n    ul.id = \"nav__tab\";\n    // ul.addEventListener(\"click\", this.onTabClick, false);\n    const li1 = this.createElement(\"li\");\n\n    li1.addEventListener('click', (e)=>{\n      const tab = document.getElementById('moves');\n      const activeTabs = document.querySelectorAll(\".active\");\n      activeTabs.forEach(function (tab) {\n        tab.className = tab.className.replace(\"active\", \"\");\n      });\n      tab?.classList.add('active');\n      const clickedTabs = document.querySelectorAll(\".clicked\");\n      clickedTabs.forEach(function (clicked) {\n        clicked.className = clicked.className.replace(\"clicked\", \"\");\n      });\n      li1.classList.add('clicked')\n\n    })\n\n    const a1 = this.createElement(\"a\");\n    a1.setAttribute(\"href\", \"#moves\");\n    a1.innerText = \"Moves\";\n    const li3 = this.createElement(\"li\", \"active\");\n\n    li3.addEventListener('click', (e)=>{\n      const tab = document.getElementById('game');\n      const activeTabs = document.querySelectorAll(\".active\");\n      activeTabs.forEach(function (tab) {\n        tab.className = tab.className.replace(\"active\", \"\");\n      });\n      tab?.classList.add('active');\n      const clickedTabs = document.querySelectorAll(\".clicked\");\n      clickedTabs.forEach(function (clicked) {\n        clicked.className = clicked.className.replace(\"clicked\", \"\");\n      });\n      li3.classList.add('clicked')\n    })\n\n    const a3 = this.createElement(\"a\");\n    a3.setAttribute(\"href\", \"#game\");\n    a3.innerText = \"Game\";\n    this.addIcons(li1, li3);\n\n    tabContainer.appendChild(ul);\n    ul.appendChild(li1);\n    ul.appendChild(li3);\n    li1.appendChild(a1);\n    li3.appendChild(a3);\n  }\n\n  private createTabs(tabContainer: HTMLElement) {\n    const tabContent = this.createElement(\"div\", \"tab__content\");\n    const tabPane1 = this.createElement(\"div\", \"tab__pane\");\n    tabPane1.id = \"moves\";\n    const tabPane3 = this.createElement(\"div\", \"tab__pane\");\n    tabPane3.classList.add(\"active\");\n    tabPane3.id = \"game\";\n\n    const lastMoveInfo= this.createElement('div', 'last__move__info');\n    lastMoveInfo.id='last__move__info';\n    const undoButtonContainer = this.createElement('div', 'undo__button__container');\n    undoButtonContainer.id='undo__button__container';\n\n    tabContent.appendChild(tabPane1);\n    tabPane1.appendChild(lastMoveInfo);\n    tabPane1.appendChild(undoButtonContainer);\n    tabContent.appendChild(tabPane3);\n    tabContainer.appendChild(tabContent);\n\n    const menu = new MenuView(tabPane3);\n    menu.display();\n  }\n\n  private addIcons(li1: HTMLElement,  li3: HTMLElement) {\n    const movesIcon = this.createElement(\"img\");\n    movesIcon.setAttribute(\"src\", `./static/assets/icons/moves_icon.svg`);\n    li1.appendChild(movesIcon);\n    const gameIcon = this.createElement(\"img\");\n    gameIcon.setAttribute(\"src\", `./static/assets/icons/game_icon.svg`);\n    li3.appendChild(gameIcon);\n  }\n\n}","import IBoard from \"../Models/boardInterface\";\n\nimport BoardModel from \"../Models/boardModel\";\nimport { QueenModel } from \"../Models/pieces\";\n\nimport {\n  EColor,\n  TField,\n  IFigure,\n} from \"../Models/pieces/figureInterface\";\nimport StageView from \"./stageView\";\nimport TabsView from \"./tabsView\";\n\nexport default class BoardView {\n  public init(parent: HTMLElement, clickHandler: (pos: TField) => void): void {\n    const board = document.createElement(\"div\");\n    board.classList.add(\"chessboard\");\n\n    //game stage\n    const stage1 = document.createElement(\"div\");\n    const stage2 = document.createElement(\"div\");\n    const container = document.createElement(\"div\");\n\n    stage1.classList.add(\"stage\");\n    const blackStage = new StageView(\"first__player\");\n    blackStage.init(stage1, EColor.White, \"Player 1\");\n    stage2.classList.add(\"stage\");\n    container.classList.add(\"container\");\n    const gamePanel = document.createElement(\"div\");\n    gamePanel.classList.add(\"game__panel\");\n    gamePanel.id = \"game__panel\";\n    const settingsPanel = document.createElement(\"div\");\n    settingsPanel.classList.add(\"settings__panel\");\n\n    const whiteStage = new StageView(\"second__player\");\n    whiteStage.init(stage2, EColor.Black, \"Player 2\");\n\n    //\n\n    for (let y = 0; y < 8; y++) {\n      for (let x = 0; x < 8; x++) {\n        const field = document.createElement(\"div\");\n\n        field.dataset.x = 1 + x + \"\";\n        field.dataset.y = 8 - y + \"\";\n\n        field.addEventListener(\"click\", () => {\n          const fieldPos: TField = [\n            parseInt(field.dataset.x!),\n            parseInt(field.dataset.y!),\n          ];\n          clickHandler(fieldPos);\n        });\n\n        field.classList.add(\"chessboard__field\");\n\n        board.appendChild(field);\n      }\n    }\n\n    //\n    parent.appendChild(container);\n    container.appendChild(gamePanel);\n    gamePanel.appendChild(stage1);\n    gamePanel.appendChild(board);\n    gamePanel.appendChild(stage2);\n    container.appendChild(settingsPanel);\n\n    const menu = new TabsView();\n    menu.init(settingsPanel);\n\n    //\n  }\n\n  public setUpBoard(board: IBoard): void {\n    for (let y = 1; y <= 8; y++) {\n      for (let x = 1; x <= 8; x++) {\n        const pos: TField = [x, y];\n        const figure = board.get(pos);\n        const field = this.getField(pos);\n        this.resetField(pos);\n        if (figure) {\n          const figureImage = this.getFigureImage(figure);\n          field.appendChild(figureImage);\n        }\n      }\n    }\n  }\n\n  private getFigureImage(figure: IFigure): HTMLElement {\n    const figureImg = document.createElement(\"img\");\n\n    //Map figure to file name\n    const file = figure.color + figure.name;\n\n    figureImg.setAttribute(\"src\", `./static/assets/pieces/kosal/${file}.svg`);\n    figureImg.setAttribute(\"alt\", `${figure.color} ${figure.name}`);\n\n    figureImg.classList.add(\"chessboard__figure\");\n\n    return figureImg;\n  }\n\n  private resetField(pos: TField): void {\n    const field = this.getField(pos);\n    field.innerHTML = \"\";\n    field.classList.value = \"\";\n    field.classList.add(\"chessboard__field\");\n  }\n\n  public setFigureOnField(pos: TField, figure: IFigure, enemyField?:TField): void {\n    const field = this.getField(pos);\n    //\n\n    if(enemyField){\n      const enemyFieldPos = this.getField(enemyField)\n      if (enemyFieldPos.hasChildNodes()) {\n        const figureSrc = enemyFieldPos.children[0].attributes[0].value;\n        const figureType = figureSrc.slice(\n          figureSrc.length - 6,\n          figureSrc.length - 4\n        );\n  \n        let figType = figureType[1];\n        const color =\n          figure.color === EColor.White ? \"last-of-type\" : \"first-of-type\";\n  \n        const figSymbol = document.querySelector<HTMLElement>(\n          `.stage:${color} > .game__stage>.figures__list > .chessboard__figure__stage.${figType}`\n        )!;\n        figSymbol.style.filter = \"invert(0)\";\n        console.log(figSymbol);\n        figSymbol.classList.remove(`${figType}`);\n      }\n      const figureImage = this.getFigureImage(figure);\n      field.innerHTML = \"\";\n      field.appendChild(figureImage);\n    }else{\n      if (field.hasChildNodes()) {\n        const figureSrc = field.children[0].attributes[0].value;\n        const figureType = figureSrc.slice(\n          figureSrc.length - 6,\n          figureSrc.length - 4\n        );\n  \n        let figType = figureType[1];\n        const color =\n          figure.color === EColor.White ? \"last-of-type\" : \"first-of-type\";\n  \n        const figSymbol = document.querySelector<HTMLElement>(\n          `.stage:${color} > .game__stage>.figures__list > .chessboard__figure__stage.${figType}`\n        )!;\n        figSymbol.style.filter = \"invert(0)\";\n        console.log(figSymbol);\n        figSymbol.classList.remove(`${figType}`);\n      }\n      const figureImage = this.getFigureImage(figure);\n      field.innerHTML = \"\";\n      field.appendChild(figureImage);\n\n    }\n\n    //\n\n\n  }\n\n  public getField(pos: TField): Element {\n    const field = document.querySelector(\n      `[data-x=\"${pos[0]}\"][data-y=\"${pos[1]}\"]`\n    )!;\n\n    return field;\n  }\n  public move(start: TField, end: TField, figure: IFigure, enemyField?: TField): void {\n    if(enemyField){\n      this.setFigureOnField(end, figure, enemyField)\n    }else{\n      this.setFigureOnField(end, figure);\n    }\n    \n    this.resetField(start);\n    if(enemyField){\n      this.resetField(enemyField);\n    }\n    this.resetStyles();\n  }\n\n  public setAsPossibleToMove(pos: TField): void {\n    const field = this.getField(pos);\n    const radioButton: HTMLInputElement = document.getElementById('possible move')! as HTMLInputElement\n    if(radioButton.checked){\n      field.classList.add(\"chessboard__field--possible_move\");\n    }\n\n  }\n\n  public setAsPossibleToAttack(pos: TField): void {\n    const field = this.getField(pos);\n    const radioButton: HTMLInputElement = document.getElementById('possible move')! as HTMLInputElement\n    if(radioButton.checked){\n      field.classList.add(\"chessboard__field--possible_attack\");\n    }\n  }\n\n  public setAsSelected(pos: TField): void {\n    const field = this.getField(pos);\n    field.classList.add(\"chessboard__field--selected\");\n  }\n\n  public resetStyles() {\n    const fields = document.querySelectorAll(\".chessboard__field\");\n    fields.forEach((field) => {\n      field.classList.value = \"\";\n      field.classList.add(\"chessboard__field\");\n    });\n  }\n  public timeDisplay(time: number, color: EColor) {\n    const nthChild = color === EColor.White ? 3 : 1;\n\n    const timer = document.querySelector(\n      `.stage:nth-child(${nthChild}) > .time`\n    )!;\n    const min = Math.floor(time / 60);\n    const sec = time % 60;\n\n    const appendZeroIfNeeded = (timeUnit: number): string =>\n      (\"\" + timeUnit).length === 1 ? `0${timeUnit}` : timeUnit.toString();\n\n    timer.innerHTML = `${appendZeroIfNeeded(min)}:${appendZeroIfNeeded(sec)} min`;\n  }\n  public getStartTime(time: number) {\n    const startTime = document.querySelector(\".time\")!;\n    startTime.innerHTML = time + \"\";\n  }\n}\n\n","import BoardModel from \"../Models/boardModel\";\nimport BoardView from \"../Views/boardView\";\n\nimport SaveOfCastling from \"../Models/savesModels/saveOfCastling\";\nimport SaveOfMove from \"../Models/savesModels/saveOfMove\";\nimport { EColor, EFigureType, IFigure, TField } from \"../Models/pieces/figureInterface\";\n\nexport class MoveSaver {\n    public moves: (SaveOfMove | SaveOfCastling)[];\n\n    constructor() {\n        this.moves = [];\n    }\n\n    public canUndoMove(): boolean{\n        return this.moves.length > 0;\n    }\n\n    public addMove(move: (SaveOfMove | SaveOfCastling)): void {\n        this.moves.push(move);\n    }\n\n    public addCastling(castling: SaveOfCastling): void {\n        this.moves.push(castling);\n    }\n\n    public revertLastMove(model: BoardModel, view: BoardView): void {\n        const lastMove = this.moves.pop();\n        if (lastMove) {\n            lastMove.revert(model, view);\n        }\n    }\n\n    public reset(): void {\n        this.moves = [];\n    }\n\n    public isEnPassantPossible(figure:IFigure, position: TField, board: BoardModel): Array<Array<number> | string>{\n\n\n    const result:Array<Array<number> | string> = [];\n    const resultingField = [];\n    const isPawn = figure.name === EFigureType.Pawn;\n    if(!isPawn){\n        return result\n    }\n    const [x,y] = position\n    const leftFigure: TField = [x-1, y];\n    const rightFigure: TField = [x+1, y];\n    const isLeftFigure = board.get(leftFigure);\n    const isRightFigure = board.get(rightFigure);\n    const isLeftPawn = isLeftFigure?.name===EFigureType.Pawn;\n    const isRightPawn = isRightFigure?.name===EFigureType.Pawn;\n\n\n    if(this.moves.length<1){return result};\n    const lastMove= this.moves[this.moves.length-1] as SaveOfMove;\n    if(lastMove.getLastMove){\n        if(isLeftPawn){\n            const { from, to, moveFor } = lastMove.getLastMove();\n            if(moveFor===EColor.Black){\n                const isTo = to[0]===leftFigure[0] && to[1]===leftFigure[1]\n                const isFrom = from[0]===leftFigure[0]&& from[1]===leftFigure[1]+2;\n                if(isTo && isFrom){\n                    resultingField.push(x-1);\n                    resultingField.push(y+1);\n                    result.push(resultingField);\n                    result.push('lb')\n                    return result\n                }\n            }else if(moveFor===EColor.White){\n                const isTo = to[0]===leftFigure[0] && to[1]===leftFigure[1]\n                const isFrom = from[0]===leftFigure[0]&& from[1]===leftFigure[1]-2;\n                if(isTo && isFrom){\n                    resultingField.push(x-1);\n                    resultingField.push(y-1);\n                    result.push(resultingField);\n                    result.push('lw')\n                    return result\n                }\n            }\n\n        }else if (isRightPawn){\n            const { from, to, moveFor } = lastMove.getLastMove();\n            if(moveFor===EColor.Black){\n                const isTo = to[0]===rightFigure[0] && to[1]===rightFigure[1];\n                const isFrom = from[0]===rightFigure[0] && from[1]===rightFigure[1]+2\n                if(isTo && isFrom){\n                    resultingField.push(x+1);\n                    resultingField.push(y+1);\n                    result.push(resultingField);\n                    result.push('rb')\n                    return result\n                }\n            }else if (moveFor===EColor.White){\n                const isTo = to[0]===rightFigure[0] && to[1]===rightFigure[1];\n                const isFrom = from[0]===rightFigure[0] && from[1]===rightFigure[1]-2;\n                if(isTo && isFrom){\n                    resultingField.push(x+1);\n                    resultingField.push(y-1);\n\n                    result.push(resultingField);\n                    result.push('rw')\n                    return result\n                }\n            }\n\n        }\n    }\n\nreturn result;\n\n    }\n}","import MovesInterface from \"./movesInterface\";\n\nexport default class MovesList implements MovesInterface {\n  public init(lastMove: string) {\n    const movesTab = document.getElementById(\"last__move__info\")!;\n    const info = document.createElement(\"div\");\n    movesTab.appendChild(info);\n    info.classList.add(\"info\");\n    info.innerHTML = lastMove;\n\n    const countChildren = document.querySelector(\"#last__move__info\")!.childElementCount;\n    if (countChildren > 6) {\n      const firstChild = document.querySelector(\"#last__move__info> .info:first-child\")!;\n      firstChild.remove();\n    }\n  }\n}\n","import IEndGame from \"./endGameInterface\";\n\nexport default class EndGame implements IEndGame {\n    parent: HTMLElement;\n    constructor(parent: HTMLElement) {\n        this.parent = parent;\n    };\n\n    createElement(tag: string, className?: string) {\n        const element = document.createElement(tag);\n        if (className) {\n            element.classList.add(className);\n        }\n        return element;\n    };\n\n    createWiner(winerColor: string){\n        const div_btn = this.createElement('div', 'buttonBox');\n        const box_reset = this.createElement('button', 'buttonBox__reset');\n        box_reset.setAttribute('id', 'buttonBox__reset');\n        const box_text = this.createElement('div', 'buttonBox__text');\n        box_text.innerText = `The winer is: ${winerColor}!`;\n        const box_text_reset = this.createElement('button', 'buttonBox__text--reset');\n        box_text_reset.innerText = \"PLAY AGAIN\";\n        box_text_reset.setAttribute('id', 'buttonBox__text--reset');\n\n        box_text.appendChild(box_text_reset);\n        div_btn.appendChild(box_reset);\n        this.parent.append(div_btn, box_text);\n\n        this.createBtnListener();\n    };\n\n    private createBtnListener(){\n        const btn_reset = document.getElementById('buttonBox__reset');\n        const btn_text_reset = document.getElementById('buttonBox__text--reset');\n        btn_reset?.addEventListener('click', () => {\n            location.reload();\n        });\n        btn_text_reset?.addEventListener('click', () => {\n            location.reload();\n        });\n    };\n\n}","import BoardModel from \"../Models/boardModel\";\nimport {\n  EColor,\n  TField,\n  IFigure,\n  EFigureType,\n} from \"../Models/pieces/figureInterface\";\nimport SaveOfCastling from \"../Models/savesModels/saveOfCastling\";\nimport SaveOfMove from \"../Models/savesModels/saveOfMove\";\nimport BoardView from \"../Views/boardView\";\nimport { MoveSaver } from \"./moveSaver\";\nimport MovesList from \"../Views/movesList\";\n\nimport { time } from \"console\";\nimport { QueenModel } from \"../Models/pieces\";\n\nimport EndGame from \"../Views/endGameView\";\n\n\nexport default class BoardController {\n  private view: BoardView;\n  private board!: BoardModel;\n  private selectedField!: TField | null;\n  private movesForSelected!: TField[];\n  private attacksForSelected!: TField[];\n  private moveFor!: EColor;\n  private timeLeftForBlack!: number;\n  private timeLeftForWhite!: number;\n  private timer!: NodeJS.Timeout;\n  private moveSaver: MoveSaver;\n\n  constructor(parent: HTMLElement) {\n    this.view = new BoardView();\n    this.view.init(parent, this.clickOnField);\n\n    this.moveSaver = new MoveSaver();\n  }\n\n  //Starts new game\n  public newGame(time: number): void {\n    //reset constroller\n    this.moveFor = EColor.White;\n    this.selectedField = null;\n    this.movesForSelected = [];\n    this.attacksForSelected = [];\n    this.timeLeftForWhite = time;\n    this.timeLeftForBlack = time;\n\n    //reset saved moves\n    this.moveSaver.reset();\n\n    //make new board model\n    this.board = new BoardModel();\n\n    //set up board\n    this.setUpBoard(this.board);\n\n    //start timer\n    this.setUpTimer();\n    if (+process.env.DEBUG!) console.log(`NEW GAME STARTS`);\n\n  }\n\n  public addEventListenerToButton() {\n    \n    this.view.timeDisplay(5*60, EColor.White);\n    this.view.timeDisplay(5*60, EColor.Black);\n    const btnBox = document.getElementById(\"menu__button--start\")!;\n    const timeElement = document.getElementById(\"range\");\n\n    btnBox.addEventListener(\"click\", (e) => {\n      let timeValue = parseInt((<HTMLInputElement>document.getElementById(\"range\"))\n      .value);\n      console.log(timeValue)\n      this.view.timeDisplay(timeValue*60, EColor.White);\n      this.view.timeDisplay(timeValue*60, EColor.Black);\n      this.newGame(timeValue * 60);\n      this.view.timeDisplay(timeValue*60, EColor.White);\n      this.view.timeDisplay(timeValue*60, EColor.Black);\n    });\n\n    timeElement?.addEventListener(\"change\", (e) => {\n      let timeValue = parseInt((<HTMLInputElement>document.getElementById(\"range\"))\n        .value);\n\n      this.view.timeDisplay(timeValue*60, EColor.White);\n      this.view.timeDisplay(timeValue*60, EColor.Black);\n\n      btnBox.addEventListener(\"click\", (e) => {\n        if (!timeValue || timeValue === 0) {\n          timeValue = 5;\n        };\n        this.view.timeDisplay(timeValue*60, EColor.White);\n        this.view.timeDisplay(timeValue*60, EColor.Black);\n      });\n\n    });\n  }\n\n  //  Moves and attacks functions\n\n  //check if given position is on given list\n  private isFieldOnList(pos: TField, list: TField[]): boolean {\n    return !list.every((elem) => elem[0] !== pos[0] || elem[1] !== pos[1]);\n  }\n\n  //select Figure on given position\n  private selectNewFigure(pos: TField): void {\n    this.view.resetStyles();\n\n    //checks moves avaible for figure on given position\n    this.selectedField = pos;\n    this.movesForSelected = this.board.possibleMovesFor(this.selectedField);\n    this.attacksForSelected = this.board.possibleAttacksFor(\n      this.selectedField,\n      this.moveSaver\n    );\n\n    //allow attack if it not cause 'check'\n    this.attacksForSelected = this.attacksForSelected.filter((attack) => {\n      return this.board.simulateMove(this.moveFor, pos, attack);\n    });\n\n    //mark figure on given position as selected\n    this.view.setAsSelected(pos);\n    const figure = this.board.get(pos)!;\n\n    //check for castling\n    if (figure.name === EFigureType.King) {\n      const row = this.moveFor === EColor.White ? 1 : 8;\n      if (this.canMakeCasting(this.moveFor, true))\n        this.movesForSelected.push([7, row]);\n      if (this.canMakeCasting(this.moveFor, false))\n        this.movesForSelected.push([2, row]);\n    }\n\n    //display on board positions avaible to move and attack\n    this.movesForSelected.forEach((field) => {\n      this.view.setAsPossibleToMove(field);\n    });\n    this.attacksForSelected.forEach((field) => {\n      this.view.setAsPossibleToAttack(field);\n    });\n  }\n\n  //cancel selection\n  private resetSelectedFigure() {\n    this.view.resetStyles();\n    this.selectedField = null;\n    this.movesForSelected = [];\n    this.attacksForSelected = [];\n  }\n\n  //Move given figure from start position to end position\n  private makeMove(start: TField, end: TField, figure: IFigure): void {\n    // this.moveSaver.isEnPeasantPossible();\n\n    //Save move\n    const savedMove = new SaveOfMove(figure.color, figure, start, end);\n    this.moveSaver.addMove(savedMove);\n\n    //move\n    this.view.move(start, end, figure);\n    this.board.move(start, end);\n\n    //print move\n    console.log(savedMove.printMove());\n\n    //moves list\n\n    const lastMove = savedMove.printMove();\n    const movesList = new MovesList();\n    movesList.init(lastMove);\n\n    //\n\n    //change turn\n    this.changeTurn();\n  }\n  \n\n  //Attack given figure on end position by given figure on start position\n  private makeAttack(start: TField, end: TField, figure: IFigure): void {\n\n    let enemyFigure = this.board.get(end);\n    let enemyField: TField = end;\n    if (enemyFigure === null) {\n      if (figure.color === EColor.White) {\n        enemyField = [end[0], end[1] - 1] as TField;\n        enemyFigure = this.board.get(enemyField)!;\n        this.board.resetField(enemyField);\n      } else {\n        enemyField = [end[0], end[1] + 1] as TField;\n        enemyFigure = this.board.get(enemyField)!;\n        this.board.resetField(enemyField);\n      }\n\n      //save attack\n      const savedAttack = new SaveOfMove(\n        figure.color,\n        figure,\n        start,\n        end,\n        enemyFigure,\n        enemyField\n      );\n      this.moveSaver.addMove(savedAttack);\n\n      //attack\n      this.view.move(start, end, figure, enemyField);\n      this.board.move(start, end);\n\n      this.board.resetField(enemyField);\n\n      //moves list\n\n      const lastMove = savedAttack.printMove();\n      const movesList = new MovesList();\n      movesList.init(lastMove);\n\n      //\n\n      //change turn\n      this.changeTurn();\n    }else {\n      //save attack\n      const savedAttack = new SaveOfMove(\n        figure.color,\n        figure,\n        start,\n        end,\n        enemyFigure\n      );\n      this.moveSaver.addMove(savedAttack);\n\n      //attack\n      this.view.move(start, end, figure);\n      this.board.move(start, end);\n\n      //moves list\n\n      const lastMove = savedAttack.printMove();\n      const movesList = new MovesList();\n      movesList.init(lastMove);\n\n      //\n\n      //change turn\n      this.changeTurn();\n    }\n  }\n\n  //Handler for clicking on field\n  private clickOnField = (pos: TField): void => {\n    if (this.selectedField) {\n      //We have selected figure already\n      this.figureAlreadySelected(pos, this.selectedField);\n    } else {\n      //We didn't select figure yet\n      this.figureNotSelected(pos);\n    }\n  };\n\n  //Help function for clickOnField()\n  private figureNotSelected(pos: TField): void {\n    //get clicked position\n    const figure = this.board.get(pos);\n\n    //if we clicked on figure select this field\n    if (figure && figure.color === this.moveFor) {\n      this.selectNewFigure(pos);\n    }\n    //otherwise do nothing\n  }\n\n  //Help function for clickOnField()\n  private figureAlreadySelected(clickedPos: TField, selectedPos: TField): void {\n    //get clicked field\n    const clickedFigure = this.board.get(clickedPos);\n\n    //get already clicked figure\n    const figure = this.board.get(selectedPos);\n\n    //check if we clicked figure\n    if (clickedFigure && figure) {\n      //check if it is our figure\n      if (clickedFigure.color === figure.color) {\n        //It is our figure so select new one\n        this.selectNewFigure(clickedPos);\n        return;\n      } else {\n        //it is enemy figure\n        //check if this figure is in renge already selected figure\n        if (this.isFieldOnList(clickedPos, this.attacksForSelected)) {\n          //It is so we can perform attack\n          this.makeAttack(selectedPos, clickedPos, figure);\n        }\n      }\n      //check if we clicked on field we can move\n    } else if (\n      figure &&\n      this.isFieldOnList(clickedPos, this.movesForSelected)\n    ) {\n      //we clicked empty field\n      //we can move on this field\n\n      //check for king\n      if (figure.name === EFigureType.King && !figure.isMoved) {\n        //check if it is field for castling\n        const row = this.moveFor === EColor.White ? 1 : 8;\n        if (clickedPos[0] === 7 && clickedPos[1] === row) {\n          //king side castling\n          this.makeCastling(this.moveFor, true);\n        } else if (clickedPos[0] === 2 && clickedPos[1] === row) {\n          //queen side castling\n          this.makeCastling(this.moveFor, false);\n        } else {\n          //normal move\n          this.makeMove(selectedPos, clickedPos, figure);\n        }\n      } else {\n        //normal move\n        this.makeMove(selectedPos, clickedPos, figure);\n      }\n    } else if (\n      figure &&\n      this.isFieldOnList(clickedPos, this.attacksForSelected)\n    ) {\n      this.makeAttack(selectedPos, clickedPos, figure);\n    }\n    this.resetSelectedFigure();\n  }\n\n  //Make castling, should be used only if canMakeCastling gives true for same parameters\n  private makeCastling(color: EColor, kingSide: boolean) {\n    //save castling\n    const savedMove = new SaveOfCastling(color, kingSide);\n    this.moveSaver.addMove(savedMove);\n\n    const row = color === EColor.White ? 1 : 8;\n\n    const initKingPos: TField = [5, row];\n    const initRookPos: TField = kingSide ? [8, row] : [1, row];\n\n    const newKingPos: TField = kingSide ? [7, row] : [2, row];\n    const newRookPos: TField = kingSide ? [6, row] : [3, row];\n\n    const king = this.board.get(initKingPos)!;\n    const rook = this.board.get(initRookPos)!;\n\n    //move king\n    this.view.move(initKingPos, newKingPos, king);\n    this.board.move(initKingPos, newKingPos);\n    king.move();\n\n    //move rook\n    this.view.move(initRookPos, newRookPos, rook);\n    this.board.move(initRookPos, newRookPos);\n    rook.move();\n\n    //change turn for enemy\n    this.changeTurn();\n\n    //display last move\n    const lastMove = savedMove.printMove();\n    const movesList = new MovesList();\n    movesList.init(lastMove);\n  }\n\n  //Check if castling can be performed\n  private canMakeCasting(color: EColor, kingSide: boolean): boolean {\n    //Select row for king\n    const row = color === EColor.White ? 1 : 8;\n    //select king figure\n    const king = this.board.get([5, row]);\n    if (king && !king.isMoved) {\n      if (kingSide) {\n        //check king side castling\n        if (this.board.get([6, row])) return false;\n        if (this.board.get([7, row])) return false;\n        const rook = this.board.get([8, row]);\n        if (rook && !rook.isMoved) return true;\n      } else {\n        //check queen side castling\n        if (this.board.get([4, row])) return false;\n        if (this.board.get([3, row])) return false;\n        if (this.board.get([2, row])) return false;\n        const rook = this.board.get([1, row]);\n        if (rook && !rook.isMoved) return true;\n      }\n    }\n    return false;\n  }\n\n  //  Game functions\n\n  //display board for given model\n  private setUpBoard(board: BoardModel): void {\n    this.view.setUpBoard(board);\n  }\n\n  // set up new timer\n  private setUpTimer() {\n    this.timer = setInterval(this.updateTime, 1000);\n  }\n\n\n  public stopTimer() {\n    clearInterval(this.timer);\n  }\n\n  //handler for timer\n  private updateTime = (): void => {\n    if (this.moveFor === EColor.White) {\n      this.timeLeftForWhite -= 1;\n      if (this.timeLeftForWhite <= 0) {\n        this.gameOver(EColor.Black);\n        return;\n      }\n\n      this.view.timeDisplay(this.timeLeftForWhite, this.moveFor);\n      if (+process.env.DEBUG! && +process.env.DEBUG_TIMER!) {\n\n        console.log(`Left time for White: ${this.timeLeftForWhite}sec`);\n    }} else {\n      this.timeLeftForBlack -= 1;\n      if (this.timeLeftForBlack <= 0) {\n        this.gameOver(EColor.White);\n        return;\n      }\n\n      this.view.timeDisplay(this.timeLeftForBlack, this.moveFor);\n\n      if (+process.env.DEBUG! && +process.env.DEBUG_TIMER!)\n        console.log(`Left time for Black: ${this.timeLeftForBlack}sec`);\n    }\n  };\n\n  //change turn for enemy player\n  private changeTurn() {\n    const nextMoveFor =\n      this.moveFor === EColor.White ? EColor.Black : EColor.White;\n    if (this.board.isCheckMate(nextMoveFor)) this.gameOver(this.moveFor);\n    this.moveFor = nextMoveFor;\n  }\n\n  //handler for 'undo' last move\n  public undoMove = () => {\n    if (this.moveSaver.canUndoMove()) {\n      this.moveSaver.revertLastMove(this.board, this.view);\n      this.moveFor =\n        this.moveFor === EColor.White ? EColor.Black : EColor.White;\n      this.resetSelectedFigure();\n    }\n  };\n\n  //game over handler\n  private gameOver(winer: EColor) {\n    this.stopTimer();\n    let winerColor = '';\n    if (winer === 'b') {\n      winerColor = \"BLACK\"\n      } else {\n      winerColor = \"WHITE\"\n    };\n    const root = document.getElementById('root')!;\n    const end = new EndGame(root);\n\n    end.createWiner(winerColor);\n  };\n}\n","import BoardController from \"./Controllers/boardController\";\n\nexport default function App(): void {\n    if (+process.env.DEBUG!) console.log('Start Chess App...');\n    const root = document.getElementById('root')!;\n\n    const controller = new BoardController(root);\n    const revertBtn = document.createElement('button');\n    revertBtn.addEventListener('click', controller.undoMove);\n    revertBtn.addEventListener('click', ()=>{\n        const lastRecord = document.getElementById('last__move__info')?.lastChild;\n        if(lastRecord){\n            lastRecord.remove()\n        }\n    })\n    revertBtn.innerHTML = 'UNDO';\n    revertBtn.classList.add('revert__button');\n\n    const element =  document.getElementById('undo__button__container')!;\n    element.appendChild(revertBtn);\n\n    controller.addEventListenerToButton();\n}","import App from './App/App';\n\nApp();"]}